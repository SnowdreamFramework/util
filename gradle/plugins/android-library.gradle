apply plugin: 'com.android.library'
apply from: "${rootDir}/gradle/plugins/util.gradle"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka-android'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')

    if (optProperty("POM_PACKAGING") == 'aar') {
        //android
        compile deps.'android-support-appcompat-v7'
        compile deps.'android-support-support-annotations'
        compile deps.'android-support-design'
        compile deps.'android-support-multidex'

        //snowdream
        compile deps.'snowdream-annotation'

        androidTestCompile(deps.'android-support-espresso', {
            exclude group: 'com.android.support', module: 'support-annotations'
        })
    }

    //kotlin
    compile deps.'kotlin-stdlib'

    //java
    testCompile deps.junit
}

android {
    compileSdkVersion Integer.parseInt(optProperty("COMPILE_SDK_VERSION"))
    buildToolsVersion optProperty("BUILD_TOOLS_VERSION")

    defaultConfig {
        versionCode Integer.parseInt(optProperty("VERSION_CODE"))
        versionName optProperty("VERSION_NAME")
        minSdkVersion Integer.parseInt(optProperty("MIN_SDK_VERSION"))
        targetSdkVersion Integer.parseInt(optProperty("TARGET_SDK_VERSION"))

        testApplicationId optProperty("PACKAGE_NAME") + ".test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        testHandleProfiling true
        testFunctionalTest true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            if (containsProperty("KEYSTORE")) {
                storeFile file(optProperty("KEYSTORE"))
                storePassword optProperty("KEYSTORE_PASSWORD")
                keyAlias optProperty("KEY_ALIAS")
                keyPassword optProperty("KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            //shrinkResources true
            //proguardFile getDefaultProguardFile('proguard-android.txt')
            consumerProguardFiles 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        abortOnError false
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        title = "android lib - " + optProperty("PROJECT_NAME", project.name) + " v" + optProperty("VERSION_NAME") + " API"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar =
                optProperty("ANDROID_HOME") + "/platforms/android-" + optProperty("COMPILE_SDK_VERSION") + "/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
            links("http://docs.oracle.com/javase/7/docs/api/");
            linksOffline("http://d.android.com/reference", optProperty("ANDROID_HOME") + "/docs/reference");
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

dokka {
    moduleName = 'util'
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    processConfigurations = ['compile', 'extra']
    includes = ['packages.md', 'extra.md']
    samples = ['samples/basic.kt', 'samples/advanced.kt']
    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/snowdream/"
        suffix = "#L"
    }
    sourceDirs = files('src/main/kotlin')
}
