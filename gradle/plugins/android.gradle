apply plugin: 'com.android.application'
apply from: "${rootDir}/gradle/plugins/util.gradle"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

dependencies {
    compile  fileTree(dir: 'libs', include: '*.jar')

    //android
    compile deps.'android-support-appcompat-v7'
    compile deps.'android-support-support-annotations'
    compile deps.'android-support-design'
    compile deps.'android-support-multidex'

    //snowdream
    compile deps.'snowdream-annotation'

    //kotlin
    compile deps.'kotlin-stdlib'

    //java
    testCompile deps.junit

    androidTestCompile(deps.'android-support-espresso', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

android {
    compileSdkVersion Integer.parseInt(optProperty("COMPILE_SDK_VERSION"))
    buildToolsVersion optProperty("BUILD_TOOLS_VERSION")

    defaultConfig {
        versionCode  Integer.parseInt(optProperty("VERSION_CODE"))
        versionName optProperty("VERSION_NAME")
        minSdkVersion Integer.parseInt(optProperty("MIN_SDK_VERSION"))
        targetSdkVersion Integer.parseInt(optProperty("TARGET_SDK_VERSION"))
        applicationId optProperty("PACKAGE_NAME")

        testApplicationId optProperty("PACKAGE_NAME")+".test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        testHandleProfiling true
        testFunctionalTest true
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    
    signingConfigs {
        release {
          if (containsProperty("KEYSTORE")) {
            storeFile file(optProperty("KEYSTORE"))
            storePassword optProperty("KEYSTORE_PASSWORD")
            keyAlias optProperty("KEY_ALIAS")
            keyPassword optProperty("KEY_PASSWORD")
          }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles "${rootDir}/gradle/proguard/proguard-android-app-optimize.txt", 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    
    lintOptions {
        abortOnError false
    }
}

android.applicationVariants.all { variant ->
    def apk = variant.outputs[0].outputFile;
    def newName = "";

    newName = apk.name.replace(project.name, optProperty("PROJECT_NAME", project.name) + "-v" + android.defaultConfig.versionName);
    newName = newName.replace("-" + variant.buildType.name, "");
    newName = newName.replace(".apk", "-" + variant.buildType.name.toLowerCase() + ".apk");

    variant.outputs[0].outputFile = new File(apk.parentFile, newName);
    if (variant.outputs[0].zipAlign) {
        variant.outputs[0].zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
    }
}

android.applicationVariants.all { variant ->

    task("generate${variant.name}Javadoc", type: Javadoc) {
        title = "android lib - "+ optProperty("PROJECT_NAME", project.name)+" v"+optProperty("VERSION_NAME")+" API"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar =
                  optProperty("ANDROID_HOME")+"/platforms/android-"+ optProperty("COMPILE_SDK_VERSION")+"/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
            links("http://docs.oracle.com/javase/7/docs/api/");
            linksOffline("http://d.android.com/reference", optProperty("ANDROID_HOME")+"/docs/reference");
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}
